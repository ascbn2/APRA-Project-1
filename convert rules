import pandas as pd
import numpy as np

def isnull(value):
    """Helper function to check for null values."""
    return value is None or pd.isna(value)

def mad(arr):
    """Computes Median Absolute Deviation (MAD) for an array."""
    median = np.median(arr)
    return np.median(np.abs(arr - median))

def load_rules(csv_path):
    """Loads validation rules from a CSV file."""
    df = pd.read_csv(csv_path)
    return df["rule_id"].tolist(), df["condition"].tolist()

def apply_rules(data, rules):
    """Applies validation rules dynamically."""
    results = {}

    # Replace SQL-like conditions with Python-compatible syntax
    replacements = {
        "<>": "!=",
        "ISNULL(": "isnull(",
        "ABS(": "abs(",
        "SUM(": "sum(",  # Assumes a list of values for SUM()
        "MAD(": "mad(",  # Convert MAD function
        "ARRAY(": "np.array(",  # Convert ARRAY() to NumPy array
        "{Time=Period-1}": "[0]",  # Accessing previous period's value
        "{Time=Period-2}": "[1]",
        "{Time=Period-3}": "[2]",
        "{Time=Period-4}": "[3]",
        "{Time=Period-5}": "[4]",
        "{Time=Period-6}": "[5]",
        "{Time=Period-7}": "[6]",
        "{Time=Period-8}": "[7]",
    }

    for idx, rule in enumerate(rules):
        python_condition = rule

        # Replace SQL operators with Python equivalents
        for old, new in replacements.items():
            python_condition = python_condition.replace(old, new)

        # Evaluate the rule dynamically
        try:
            results[f"Rule_{idx+1}"] = eval(python_condition, {"isnull": isnull, "sum": sum, "abs": abs, "mad": mad, "np": np}, data)
        except Exception as e:
            results[f"Rule_{idx+1}"] = f"Error: {str(e)}"

    return results

# Load rules from CSV
csv_file = "rules.csv"
rule_ids, rule_conditions = load_rules(csv_file)

# Example data dictionary with historical values
data = {
    "CS24393": 10,
    "CS24396": 5000,
    "CS24397": 200,
    "CS24397_list": [100, 50, 50],  # Used for SUM()
    "CS24447": 5,
    "OI11754": "Some Value",
    "OI11755": "Another Value",
    "OI11748": "ORFR reserve",
    "BSAO22800": 10_000_000,  # Current period value
    "BSAO22800_list": [9_800_000, 9_600_000, 9_400_000, 9_200_000, 9_000_000, 8_800_000, 8_600_000, 8_400_000],  # Last 8 periods
}

# Apply validation rules
validation_results = apply_rules(data, rule_conditions)

# Print results
for rule, result in validation_results.items():
    print(f"{rule}: {result}")
